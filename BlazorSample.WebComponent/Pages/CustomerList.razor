@page "/Customers"

@using BlazorSample.WebComponent.Models;
@using BlazorSample.WebComponent.Services;
@inject UserService userservice
@inject NavigationManager NavManager
@inject IJSRuntime JSRuntime
@inject UserService _userService

<PageTitle>Customers</PageTitle>

<div class="d-flex align-items-center justify-content-between">
    <h3>Customers</h3>
    <button class="btn btn-success" type="submit" @onclick="() => NavigateAddCustomer()">Add Customer</button>
</div>

@if (!string.IsNullOrEmpty(SuccessMessage))
{
    <div class="alert alert-success mt-2">
        @SuccessMessage
    </div>
}
@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger mt-2">
        @ErrorMessage
    </div>
}


<div class="mt-5">
    @if (customerList != null)
    {
        <div class="table-responsive">
            <table class="table table-hover">
                <thead>
                    <tr>
                        <th scope="col">First Name</th>
                        <th scope="col">Last Name</th>
                        <th scope="col">Email</th>
                        <th scope="col">Phone Number</th>
                        <th scope="col">City</th>
                        <th scope="col">Zip Code</th>
                        <th scope="col">State</th>
                        <th scope="col">Country</th>
                        <th scope="col">Created On</th>
                        <th scope="col">Action</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var customer in customerList)
                    {
                        <tr>
                            <td>@customer.FirstName</td>
                            <td>@customer.LastName</td>
                            <td>@customer.EmailId</td>
                            <td>@customer.Phonenumber</td>
                            <td>@customer.City</td>
                            <td>@customer.ZipCode</td>
                            <td>@customer.State</td>
                            <td>@customer.Country</td>
                            <td>@customer.Createdon</td>
                            <td>
                                <a href="javascript:void(0);" class="btn btn-link me-3" title="Edit Customer" @onclick="() => EditCustomer(customer)"><i class="oi oi-pencil"></i></a>
                                <a href="javascript:void(0);" class="btn btn-link me-3" title="Delete Customer" @onclick="()=>  DeleteCustomer(customer.CustomerId)"><i class="oi oi-trash" aria-hidden="true"></i></a>
                            </td>
                            <td>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
    else
    {
        <p><em>Loading...</em></p>
    }
</div>

@code {
    private string SuccessMessage = string.Empty;
    private string ErrorMessage = string.Empty;
    private List<TBLUser>? customerList;
    TBLUser User = new TBLUser();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await GetCustomerList();
        }
        catch(Exception ex)
        {
            var err = ex.Message;
        }
    }

    private void EditCustomer(TBLUser customerData)
    {
        try
        {
            NavManager.NavigateTo("/editcustomer/" + customerData.CustomerId);
        }
        catch (Exception ex)
        {
            var err = ex.Message;
        }
        
    }

    private void NavigateAddCustomer()
    {
        try
        {
            NavManager.NavigateTo("/addcustomer");
        }
        catch (Exception ex)
        {
            var err = ex.Message;
        }
        
    }

    private async Task GetCustomerList()
    {
        try
        {
            customerList = await userservice.GetCustomers();
        }
        catch (Exception ex)
        {
            ErrorMessage = "Sorry, an unexpected error has occurred. Please try again.";
            throw ex;
        }
    }

    private async Task DeleteCustomer(int customerId)
    {
        try
        {
            if (!await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete the customer?"))
                return;
            await _userService.DeleteUser(customerId);
            SuccessMessage = "Customer has been deleted successfully!";
            StateHasChanged();
            await Task.Delay(TimeSpan.FromSeconds(2));
            SuccessMessage = "";
            customerList = await userservice.GetCustomers();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            ErrorMessage = "Sorry, an unexpected error has occurred. Please try again.";
            throw ex;
        }
    }
}
